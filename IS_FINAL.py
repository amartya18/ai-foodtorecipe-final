# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12v8ep_PksAOXEBztXfF9oQlHqhegP0dt
"""

import keras
from keras.preprocessing import image
from keras.models import Model, load_model
from keras.applications.imagenet_utils import preprocess_input as preprocess_input_vgg
import os
import random
import numpy as np
import pandas as pd
import tables
import tkinter as tk
from tkinter import *
from tkinter import filedialog
from tkinter import Menu
import json


model = keras.applications.VGG16(weights='imagenet', include_top=True)
feat_extractor = Model(inputs=model.input, outputs=model.get_layer("fc2").output)

# load dataset features and name
hdf5_path = 'vgg16_bottleneck_features7.hdf5'
hdf5_file_temp = tables.open_file(hdf5_path, mode='r')
features = hdf5_file_temp.root.img_features
images = hdf5_file_temp.root.img_paths

# load saved approximate nearest neighbor 
# !pip install annoy
from annoy import AnnoyIndex

t = AnnoyIndex(4096)
t.load('annoy_ann_test2_all.ann')

# load json image_id to recipe
img_to_recipe = pd.read_csv('layers_img_to_recipe.csv')
recipe_id_to_recipe = pd.read_csv('layers_layer1m.csv')

def get_image_vgg(path):
    img = image.load_img(path, target_size=model.input_shape[1:3])
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input_vgg(x)
    return img, x
  

# nearest neighbor
def get_closest_images_fast_annoy(query_features, num_results=6):
    return t.get_nns_by_vector(query_features, num_results)

results = []

def browsefunc():
    file_path = filedialog.askopenfilename()
    setFilepath(file_path)

def setFilepath(file):
    query_image, x = get_image_vgg(file)
    query_features = feat_extractor.predict(x)[0]
    idx_closest = get_closest_images_fast_annoy(query_features, 3)
    for i in idx_closest:
        results.append(clean_image_id[i])
    test = img_to_recipe[img_to_recipe['image_id'].isin(results)]['recipe_id'].values
    recipes = recipe_id_to_recipe[recipe_id_to_recipe['id'].isin(test)]

    recipes_title = recipes['title'].values
    recipes_ingredients = recipes['ingredients'].values
    recipes_instructions = recipes['instructions'].values

    title = Label(text="Food Name")
    title.config(font=("Calibri", 22))
    title.pack(pady=5)
    for recipe in recipes_title:
        recipe = recipe.replace('"', ' minutes')
        recipe = recipe.replace("'", '"')
        # print(recipe)
        labeltitle = Label(text=recipe)
        labeltitle.pack(pady=5)
        # cleaned_recipe = json.loads(recipe)

    ingredients = Label(text="Food Ingredients")
    ingredients.config(font=('Calibri', 22))
    ingredients.pack(pady=5)

    ingredientscrollbar = Scrollbar(root)
    ingredientbox = Listbox(root, yscrollcommand=ingredientscrollbar.set)

    for i, recipe in enumerate(recipes_ingredients):
        recipe = recipe.replace('"', ' minutes')
        recipe = recipe.replace("'", '"')
        # print(recipe)
        cleaned_recipe = json.loads(recipe)
        ingredientbox.insert(END, ' ')
        ingredientbox.insert(END, 'Recipe ' + str(i + 1))
        ingredientbox.insert(END, ' ')
        for v in cleaned_recipe:
            ingredientbox.insert(END, v['text'])
            # labelingredient = Label(text=v['text'])
            # labelingredient.pack(pady=5)
        #   print(v['text'])
        # print("")

    ingredientbox.pack(fill=BOTH)
    instructions = Label(text="Food Instructions")
    instructions.config(font=('Calibri', 22))
    instructions.pack(pady=5)

    scrollbar = Scrollbar(root)
    instructionbox = Listbox(root, yscrollcommand=scrollbar.set)

    for i, recipe in enumerate(recipes_instructions):
        recipe = recipe.replace('"', ' minutes')
        recipe = recipe.replace("'", '"')
        # print(recipe)
        cleaned_recipe = json.loads(recipe)
        instructionbox.insert(END, ' ')
        instructionbox.insert(END, 'Recipe ' + str(i + 1))
        instructionbox.insert(END, ' ')
        for v in cleaned_recipe:
            instructionbox.insert(END, v['text'])

            # labelinstruction = Label(text=v['text'])
            # labelinstruction.pack(pady=5)
        #   print(v['text'])
        # print("")

    instructionbox.pack(fill=BOTH)

root = tk.Tk()

root.geometry("500x500")
root.title("Food to Recipe Generator")

label = Label(text="Food to Recipe Generator")

label.config(width=200)

label.config(font=("Calibri", 30))
button = tk.Button(text="Click here to open file", command=browsefunc)
label.pack(pady=10)
button.pack(pady=10)

clean_image_id = np.load('clean_images_id.npy')





root.mainloop()
